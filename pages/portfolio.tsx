import Head from "next/head";
import Link from "next/link";
import { fetchPortfolio } from "../lib/apollo";
import { Education } from "../types/graphql/education";
import { Experience } from "../types/graphql/experience";
import MainLayout from "../components/layouts/mainLayout";
import { CardRow } from "../components/cardRow";
import { Header } from "../components/header";
import { Qualification } from "../types/graphql/qualification";

export async function getStaticProps(): Promise<{ props: PortfolioProps }> {
  const data = await fetchPortfolio();
  return {
    props: {
      education: data.education,
      experiences: data.experiences,
      qualifications: data.qualifications,
    },
  };
}

type PortfolioProps = {
  education: Education[];
  experiences: Experience[];
  qualifications: Qualification[];
};

const Portfolio = ({
  education,
  experiences,
  qualifications,
}: PortfolioProps) => (
  <>
    <Head>
      <title>Portfolio</title>
      <meta
        key="description"
        name="description"
        content="Generated by create next app"
      />
      <meta
        key="responsive"
        name="viewport"
        content="width=device-width, initial-scale=1"
      />
      <link key="favicon" rel="icon" href="/favicon.ico" />
    </Head>

    <Header title="Portfolio">
      <p>
        My latest <Link href={"#Experience"}>experience</Link>,{" "}
        <Link href={"#Qualifications"}>qualifications</Link> and{" "}
        <Link href={"#Education"}>education</Link>
      </p>
    </Header>

    <div className="container">
      <CardRow
        title="Experience"
        cards={experiences.map((experience: Experience) => ({
          title: experience.company,
          body: experience.description,
          colour: experience.colour,
          date_from: experience.date_from,
          date_to: experience.date_to,
          slug: experience.slug,
          key: experience.slug,
          type: "experience",
          specifications: {
            specs: [
              {
                name: "Languages",
                details: experience.languages
                  .map(
                    (experience_language) => experience_language.language.name
                  )
                  .join(", "),
              },
              {
                name: "Frameworks",
                details: experience.frameworks
                  .map(
                    (experience_framework) =>
                      experience_framework.framework.name
                  )
                  .join(", "),
              },
              {
                name: "Tools",
                details: experience.tools
                  .map((experience_tool) => experience_tool.tool.name)
                  .join(", "),
              },
              {
                name: "Services",
                details: experience.services
                  .map((experience_service) => experience_service.service.name)
                  .join(", "),
              },
            ],
            isTable: false,
            hasLinks: experience.url != null,
          },
          footer: {
            text: experience.company,
            link: experience.url,
            backgroundColour: experience.colour,
          },
        }))}
        showViewAllButton={true}
      />

      <CardRow
        title="Qualifications"
        qualificationCards={qualifications.map(
          (qualification: Qualification) => ({
            organisation: qualification.organisation,
            course: qualification.course,
            colour: qualification.colour,
            achieved_at: qualification.achieved_at,
            expires_at: qualification.expires_at,
            slug: qualification.slug,
            key: qualification.slug,
            url: qualification.url,
          })
        )}
      />

      <CardRow
        title="Education"
        cards={education.map((edu: Education) => ({
          title: edu.establishment,
          body: edu.level,
          colour: edu.colour,
          date_from: edu.date_from,
          date_to: edu.date_to,
          slug: edu.slug,
          key: edu.slug,
          type: "education",
          specifications: {
            specs: edu.grades.map((grade) => ({
              name: grade.course,
              details: grade.score,
            })),
            isTable: false,
            hasLinks: edu.url != null,
          },
          footer: {
            text: edu.establishment,
            link: edu.url,
            backgroundColour: edu.colour,
          },
        }))}
      />
    </div>
  </>
);
Portfolio.layout = MainLayout;

export default Portfolio;
